#+TITLE: ppv - Python Plate Vetting

Tools for dealing with SDSS-V plate files and plate runs.
* Installation
:PROPERTIES:
:header-args:  :exports code
:END:

- *Setup environment* (optional, but recommended) \\
  If fulfilling the [[require][Requirements]] seems daunting and you run the conda package manager, you can set up a python environment that will happily install `ppv` with
  #+BEGIN_SRC shell
  conda env create -f ppv_sdss_min.yml  # creates conda environment
  conda activate ppv  # activates conda environment
  #+END_SRC

  Once you have activated your environment, proceed to clone and install!

- *Clone this repository and install*

  #+BEGIN_SRC shell
  git clone https://github.com/jcbird/ppv.git  # clone repository
  cd ppv
  python setup.py install  # install ==ppv== package
  #+END_SRC

- *Requirements* <<require>>
  - python (>3.5, 3.8 preferred) [if this frightens you, read on]
  - astropy
  - [[https://github.com/jcbird/ppv.git][pydl]] (development version)
    Package from Benjamin Weaver for dealing with yanny files.

* Configuration and Data Files
~ppv~ interacts with a number of data files and needs to know their location on disk. This is accomplished through the configuration file [[file:setup.ini][setup.ini]]. This setup file is short, but will grow in future releases.

*Note* You must edit the ~setup.ini~ and copy it to your working directory. For example, there is a copy of ~setup.ini~ in the [[file:Notebooks][Notebooks]] directory to facilitate running the tutorial notebook.

The contents of ~setup.ini~
| parameter | default value               | description                       |
|-----------+-----------------------------+-----------------------------------|
| plate_dir | /home/jquark/obsdata/plates | absolute path to plates directory |

** Plate directory and PlugHoles files

* Basic Usage

Let's assume that you have a list of targets with numpy arrays =RA=, =Dec=, and =catalogIDs= representing the positions and catalogDB IDs, respecitively.
You want to know which of these stars *could* have been targeted within platerun =2020.08.c.bhm-mwm=.

You will need to constuct a `Targets` object to contain information about your targets and a `Platerun` object to interface with; e.g.,

#+BEGIN_SRC python
import ppv
targets = ppv.Targets(RA, Dec, catalogid=catalogIDs)
platerun = ppv.Platerun('2020.08.c.bhm-mwm')
#+END_SRC python

To get boolean mask (True/False array with the same shape as =catalogIDs=) of the available targets,\\
~targets.available_in(platerun)~



~
~targets =

#+BEGIN_SRC


Check out the tutorial notebook (in the [[file:notebooks/][Notebooks]] directory) for more in depth information and examples.



*
